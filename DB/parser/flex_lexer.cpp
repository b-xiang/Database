#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1028] =
    {   0,
        0,    0,  150,  150,    2,    2,  154,  152,    4,    4,
      152,  152,  142,  148,  142,  142,  145,  142,  142,  142,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  142,  150,  151,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  137,    0,    1,  145,
      144,  143,  139,  138,  136,  140,  147,  147,  147,  147,

      147,  147,  119,  147,  120,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      121,  147,  147,  122,  123,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  124,  125,  126,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  127,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  141,  150,  149,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  146,  143,  105,  147,  106,  147,  147,  107,
      147,  108,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  109,  147,  131,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  110,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  111,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  112,  147,
      147,  113,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  114,  147,  147,  115,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  116,  147,
      147,  147,  147,  117,  147,  147,  147,  147,  118,  147,
      147,  147,  147,   67,  147,  147,  147,  147,  147,  147,
      147,  147,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  147,  147,  147,  147,  147,  147,   77,  147,

       78,   79,  147,  147,  147,  147,   80,  147,  147,  147,
      147,   81,  147,  147,  147,   82,   83,  147,  147,  147,
      147,  147,  147,  147,   84,  147,   85,   86,  147,  147,
       87,  147,   88,  147,  130,  147,  147,  147,  147,  147,
      147,   89,  147,   90,   91,   92,  147,   94,  147,   95,
      147,  147,  147,  147,   96,  147,  147,  147,  147,  147,
       97,  147,  147,  147,  147,  147,  147,  147,  147,   98,
      147,  147,  147,  147,   99,  100,  101,  134,  147,  147,
      147,  147,  147,  147,  147,  147,  102,  147,  103,  147,
      104,  133,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   56,   57,  147,   58,  147,  147,  147,  147,

      147,  147,   59,  147,  147,  147,   60,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  135,   61,  147,   62,
      147,  147,   93,  147,   63,   64,  147,  147,  147,  147,
       65,   66,   68,   69,  147,  132,  147,  147,  147,   70,
       71,  147,  147,  147,  147,  147,   72,  147,  147,  147,
      147,  147,   73,  147,  147,  147,   74,  147,  147,  147,
       75,  147,  147,  147,   76,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  147,   31,
      147,  147,   32,  147,   33,  147,  147,   34,   35,  147,
       36,   37,   38,  147,   39,  147,  147,   41,   42,  147,
       43,   44,  147,  147,   45,  129,  147,  147,   46,  147,
      147,  147,   47,  147,   48,  128,   49,   50,  147,   51,
      147,  147,  147,   52,   53,   54,   55,  147,  147,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  147,   19,  147,   20,   21,
       40,   22,   23,  147,   24,  147,  147,   25,   26,  147,
       27,   28,  147,  147,  147,   29,   30,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  147,   10,  147,   11,  147,   12,

      147,  147,   13,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  147,    7,  147,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1035] =
    {   0,
        0,    0,  470,  466,   67,    0,  470, 4057,  133,  135,
      428,    0, 4057, 4057,  131,  400,  133,  132,  387,  357,
      129,  129,  137,  135,  145,  196,  176,  184,  217,  124,
      141,  201,  213,  238,  255,  250,    0,  243,  269,  312,
      251,  191,  273,  144,  291,    0,  342,    0,  200,  212,
      332,  315,    0,    0,  212,  296,  207,  247,  291,  284,
      370,  437,  491,  543,  591,  643,  355,  301,  691,  300,
      266,  366,  429,  743,  791,  438,  367,  442,  841,  893,
      479,  537,  450,  388,  210,  333, 4057,  262, 4057,  338,
      245,  237, 4057, 4057, 4057, 4057,    0,  147,  178,  365,

      445,  195,  316,  481,    0,  371,  323,  491,  492,  306,
      488,  544,  360,  374,  381,  395,  417,  442,  544,  440,
      441,  473,  482,  497,  539,  539,  540,  548,  579,  536,
        0,  550,  576,  631,  585,  591,  576,  596,  593,  608,
      589,  598,  599,  594,  626,  635,  652,  648,    0,  652,
      637,  641,  659,  658,  679,  658,  691,  699,  685,  683,
      705,  705,  696,  723,  707,  700,  698,  694,  740,  714,
      745,  739,  748,  750,  736,  758, 4057,    0, 4057,    0,
      349,    0,  203,    0,  353,  190,  161,    0,    0,    0,
        0,  762,  795,  783,  813,  836,  837,  845,  880,  826,

      891,  914,  919,  942,  931,  929,  994,  972,  957,  960,
      982, 1006, 1018, 1068, 1020, 1024, 1049, 1037, 1060, 1055,
     1081, 1094, 1103, 1113, 1109,  874, 1112, 1126, 1175, 1158,
     1161,  983, 1171, 1204, 1223, 1166, 1200, 1225, 1215, 1229,
     1135, 1258, 1240, 1253, 1264, 1274, 1266, 1292, 1298, 1308,
     1307, 1320, 1326, 1332, 1343, 1361, 1365, 1371, 1374, 1283,
     1387, 1386, 1399, 1396, 1411, 1425, 1428, 1440, 1439, 1449,
     1451,    0, 4057,  145,    0,  757,    0,  785,  789,    0,
      801,    0,  792,  830,  842, 1036,  845,  866,  921,  951,
      940,    0,  964,    0,  981, 1002, 1450, 1048, 1078, 1077,

     1114, 1113, 1170,    0, 1180, 1180, 1189, 1214, 1231, 1256,
     1263, 1331, 1341,    0, 1340, 1370, 1420, 1420, 1451, 1453,
     1446, 1455, 1460, 1473, 1472, 1483, 1485, 1489, 1493, 1474,
     1485,    0, 1480, 1499, 1497, 1503, 1508, 1503, 1505, 1492,
     1496, 1497,    0, 1507, 1502, 1504, 1519, 1523, 1528, 1516,
     1516, 1525, 1540, 1522, 1536, 1543, 1534, 1547,    0, 1530,
     1534, 1538, 1548,    0, 1545, 1542, 1549, 1559,    0, 1568,
     1555, 1551, 1566,    0, 1560, 1556, 1575, 1560, 1564, 1578,
     1578, 1577,    0,  140, 1593, 1601, 1602, 1603, 1612, 1607,
     1615, 1616, 1631, 1637, 1645, 1669, 1653, 1661, 1656, 1690,

     1685, 1675, 1687, 1691, 1720, 1701, 1715, 1725, 1709, 1731,
     1744, 1749, 1739, 1743, 1765, 1755, 1779, 1780, 1798, 1795,
     1783, 1789, 1817, 1811, 1833, 1839, 1823, 1849, 1851, 1852,
     1862, 1875, 1874, 1885, 1893, 1888, 1906, 1907, 1919, 1925,
     1928, 1911, 1942, 1916, 1947, 1950, 1965, 1971, 1979, 1987,
     1990, 1993, 1995, 2004, 2028, 2019, 1996, 2025, 2053, 2047,
     2050, 2071, 2058, 2069, 2087, 2082, 2093, 2092, 2095, 2108,
     2121, 2123, 2124, 2125, 2146, 2147, 2160, 2156, 2159, 2181,
     2185, 2182, 2214, 2191, 2216, 2215, 2246, 2227, 2233, 2256,
     2264, 2268, 1584, 1585, 1613, 1627, 1693, 1774,    0, 1832,

        0,    0, 1826, 1844, 1882, 1945,    0, 1995, 2019, 2044,
     2114,    0, 2129, 2157, 2170,    0,    0, 2188, 2202, 2207,
     2215, 2255, 2259, 2259,    0, 2255,    0,    0, 2281, 2268,
        0, 2276,    0, 2277,    0, 2289, 2277, 2279, 2286, 2287,
     2300,    0, 2294,    0,    0,    0, 2290,    0, 2300,    0,
     2309, 2304, 2307, 2307,    0, 2323, 2322, 2310, 2311, 2322,
        0, 2335, 2337, 2327, 2325, 2324, 2333, 2333, 2345,    0,
     2344, 2348, 2353, 2344,    0,    0, 2341,    0, 2358, 2350,
     2345, 2367, 2349, 2365, 2372, 2370,    0, 2358,    0, 2375,
        0,    0, 2376, 2384, 2378, 2387, 2393, 2392, 2395, 2421,

     2408, 2409, 2410, 2438, 2432, 2446, 2443, 2462, 2461, 2471,
     2480, 2472, 2497, 2501, 2516, 2506, 2510, 2514, 2520, 2529,
     2539, 2515, 2555, 2560, 2564, 2568, 2565, 2569, 2574, 2579,
     2573, 2604, 2598, 2609, 2603, 2608, 2614, 2633, 2644, 2649,
     2665, 2639, 2663, 2648, 2673, 2681, 2687, 2698, 2699, 2703,
     2704, 2721, 2737, 2739, 2722, 2755, 2727, 2758, 2770, 2773,
     2772, 2791, 2807, 2796, 2809, 2806, 2824, 2837, 2815, 2825,
     2841, 2863, 2850, 2855, 2858, 2860, 2879, 2869, 2903, 2891,
     2909, 2912, 2904, 2913, 2914, 2944, 2943, 2949, 2948, 2953,
     2957, 2958,    0,    0, 2405,    0, 2427, 2467, 2476, 2596,

     2637, 2682,    0, 2678, 2704, 2716,    0, 2702, 2752, 2801,
     2812, 2832, 2880, 2931, 2950, 2957,    0,    0, 2955,    0,
     2964, 2954,    0, 2964,    0,    0, 2968, 2986, 2973, 2981,
        0,    0,    0,    0, 2997,    0, 3002, 2996, 2986,    0,
        0, 3002, 2990, 2994, 3008, 3005,    0, 3015, 3013, 3001,
     3018, 3022, 3005, 3007, 3006, 3026,    0, 3023, 3028, 3031,
        0, 3018, 3037, 3041,    0, 3041, 3042, 3051, 3053, 3055,
     3056, 3066, 3070, 3057, 3081, 3085, 3109, 3107, 3091, 3095,
     3110, 3124, 3096, 3120, 3135, 3148, 3139, 3145, 3181, 3158,
     3164, 3187, 3169, 3197, 3200, 3183, 3218, 3202, 3212, 3231,

     3215, 3223, 3241, 3236, 3252, 3254, 3257, 3266, 3267, 3280,
     3282, 3290, 3269, 3271, 3295, 3306, 3308, 3311, 3320, 3323,
     3334, 3345, 3349, 3360, 3377, 3368, 3385, 3374, 3379, 3336,
     3390, 3414, 3403, 3408, 3419, 3422, 3431, 3436, 3161,    0,
     3189, 3325, 3325, 3377,    0, 3395, 3423,    0,    0, 3445,
        0,    0,    0, 3444,    0, 3438, 3433,    0,    0, 3432,
        0,    0, 3440, 3457,    0,    0, 3452, 3466,    0, 3449,
     3467, 3448,    0, 3474, 3459,    0,    0,    0, 3469,    0,
     3481, 3485, 3467,    0,    0,    0,    0, 3472, 3480, 3490,
     3493, 3496, 3498, 3501, 3519, 3502, 3535, 3536, 3507, 3511,

     3552, 3541, 3544, 3547, 3565, 3569, 3575, 3586, 3570, 3573,
     3587, 3598, 3603, 3619, 3604, 3609, 3615, 3637, 3647, 3621,
     3638, 3649, 3652, 3655, 3663, 3673, 3677, 3678, 3681, 3706,
     3689, 3695, 3707, 3717, 3692, 3711, 3721, 3723, 3747, 3745,
        0,    0,    0,    0,    0, 3501,    0, 3515,    0,    0,
        0,    0,    0, 3583,    0, 3614, 3729,    0,    0, 3720,
        0,    0, 3733, 3741, 3751,    0,    0, 3755, 3757, 3761,
     3763, 3766, 3789, 3771, 3780, 3797, 3799, 3801, 3803, 3805,
     3831, 3814, 3820, 3815, 3837, 3839, 3853, 3843, 3845, 3869,
     3871, 3854, 3877, 3883, 3754,    0, 3796,    0, 3836,    0,

     3855, 3874,    0, 3893, 3887, 3911, 3905, 3923, 3917, 3919,
     3922, 3921, 3888,    0, 3913,    0,    0, 3945, 3947, 3957,
     3955, 3956,    0,    0, 3959, 3961, 4057, 4026, 4031,  135,
     4036, 4041, 4046, 4051
    } ;

static const flex_int16_t yy_def[1035] =
    {   0,
     1027,    1, 1028, 1028, 1027,    5, 1027, 1027, 1027, 1027,
     1027, 1029, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1027, 1031, 1027, 1032, 1032, 1027,
     1032, 1033, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1034, 1034,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1032, 1027, 1027, 1029, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1027, 1031, 1027, 1032,
     1032, 1032, 1033, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1032, 1027, 1027, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1032, 1032,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1030, 1030, 1030, 1030, 1030,   62,   62,   62,
       62,   62, 1030, 1030,   62,   62,    0, 1027, 1027, 1027,
     1027, 1027, 1027, 1027
    } ;

static const flex_int16_t yy_nxt[4125] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  111,  384,
      106,  136,  112,  100,  274,  101,  113,  107,  137,  102,
      103,  176,  114,  275,  108,  115,  105,  109,  110,  116,
      384,  117,   98,  104,   99,  111,  118,  106,  136,  112,
      100,  119,  101,  113,  107,  137,  102,  103,  176,  114,
      275,  108,  115,  105,  109,  110,  116,  128,  117,  186,

      126,  181,   86,  118,  172,  129,  127,  383,  119,  120,
      276,  130,  173,   86,   86,  187,  185,  121,  138,  184,
      122,  185,  139,  123,  128,  281,  124,  126,  140,  125,
      141,  172,  129,  127,  142,  131,  120,  276,  130,  173,
      143,  132,  133,  134,  121,  138,  274,  122,  135,  139,
      123,  144,  281,  124,   91,  140,  125,  141,  188,  189,
      155,  142,  131,  152,  156,  145,  273,  143,  132,  133,
      134,  146,  147,  148,  153,  135,  272,  169,  144,  170,
      154,  149,  171,  232,  157,  150,  158,  155,  151,  159,
      152,  156,  145,  174,  175,  191,  160,  161,  146,  147,

      148,  153,  190,  192,  169,  186,  170,  154,  149,  171,
      232,  157,  150,  158,  223,  151,  159,  192,  192,  180,
      174,  175,  224,  160,  161,  162,  163,  231,  225,  164,
      192,  282,  165,  166,   86,   86,  287,  192,  192,  167,
      292,  223,  168,  182,  192,  192,   92,   90,  179,  224,
      181,   86,  162,  163,  231,  225,  164,  177,  282,  165,
      166,  187,  185,  287,  192,  192,  167,  292,   96,  168,
      180,  180,  192,  180,  180,  180,  180,  180,  180,  221,
      180,  180,  180,  233,  192,  222,  193,  234,  194,  277,
      299,  300,  192,  235,  195,  285,  196,  278,   95,  192,

      197,  198,  286,  192,  192,  271,  221,  301,  302,   91,
      233,  192,  222,  193,  234,  194,  277,  299,  300,  192,
      235,  195,  285,  196,  278,  192,  303,  197,  198,  286,
      192,  192,  271,  304,  301,  302,  180,  180,  180,   87,
      180,  180,  180,  180,  180,  180,  236,  180,  180,  180,
      237,  247,  192,  303,  199,  192,  238,  305,  279,  250,
      304,  280,  248,  251,  311,  312,  192,  192,  249, 1027,
      269,  270,   47,  236,  200,  192,   47,  237,  247,  192,
     1027,  199,  192,  238,  305,  279,  250,  192,  280,  248,
      251,  311,  312,  192,  192,  249,  192,  269,  270,  283,

      313,  200,  192,  180,  201,  264,  192,  265,  192,  290,
      266,  202,  314,  284,  192,  288,  192,  289,  203,  291,
      293,  204,  205,  192,  315,  294,  283,  313,  192, 1027,
     1027,  201,  264, 1027,  265,  192,  290,  266,  202,  314,
      284, 1027,  288,  192,  289,  203,  291,  293,  204,  205,
      267,  315,  294, 1027,  192,  192,  206,  295,  268,  306,
      207,  307,  296,  316,  208,  308,  317,  318,  297,  323,
      209,  324,  309,  210,  192,  298,  310,  267, 1027,  319,
      192,  192,  320,  206,  295,  268,  306,  207,  307,  296,
      316,  208,  308,  317,  318,  297,  323,  209,  324,  309,

      210,  192,  298,  310,  325,  321,  319,  192,  192,  320,
      322,  330,  331,  332,  333,  211,  334,  212,  335,  339,
     1027,  336,  213,  337,  340,  341,  342,  214,  192, 1027,
     1027,  325,  321, 1027,  338,  192, 1027,  322,  330,  331,
      332,  333,  211,  334,  212,  335,  339,  326,  336,  213,
      337,  340,  341,  342,  214,  192,  215,  327,  343,  344,
      192,  338,  328,  329,  216,  345,  346,  217,  347,  348,
      218,  349,  350,  219,  326,  351,  220,  355, 1027,  352,
      192, 1027, 1027,  215,  327,  343,  344,  192, 1027,  328,
      329,  216,  345,  346,  217,  347,  348,  218,  349,  350,

      219, 1027,  351,  220,  355,  353,  352,  192,  192,  226,
      354,  356,  360,  361,  357,  227,  228,  229,  362,  363,
      364, 1027,  230,  358,  367,  368,  369,  370,  192, 1027,
      373,  359,  353, 1027, 1027,  192,  226,  354,  356,  360,
      361,  357,  227,  228,  229,  362,  363,  364,  365,  230,
      358,  367,  368,  369,  370,  192,  239,  373,  359,  366,
      192,  371,  374,  376,  372,  378,  375,  380,  381,  377,
      240,  382, 1027, 1027,  493,  365,  241,  242,  379,  192,
      192, 1027, 1027,  239, 1027, 1027,  366,  192,  371,  374,
      376,  372,  378,  375,  380,  381,  377,  240,  382,  192,

      192,  493,  494,  241,  242,  379,  192,  192,  192,  243,
     1027,  385,  192,  495,  496,  386, 1027,  244, 1027,  497,
      192,  245, 1027, 1027,  246, 1027,  192,  192,  192,  494,
      192, 1027,  192, 1027, 1027,  192,  243,  387,  385,  192,
      495,  496,  386,  192,  244,  388,  497,  192,  245,  389,
      192,  246,  390,  192,  192,  192,  252,  192,  253,  192,
      392,  254,  192,  192,  387,  498,  499,  391,  255,  256,
      192, 1027,  388,  192,  192,  502,  389,  192,  192,  390,
      192,  192,  192,  252, 1027,  253, 1027,  392,  254,  192,
      192,  192,  498,  499,  391,  255,  256,  192,  393,  503,

      192,  192,  502, 1027, 1027,  192,  257,  258,  192,  192,
      259,  192,  394,  260,  261,  395, 1027,  192,  192, 1027,
      262, 1027,  396,  263,  192,  393,  503,  397,  192, 1027,
      192,  192, 1027,  257,  258,  192,  192,  259,  192,  394,
      260,  261,  395,  398,  192,  399,  192,  262,  192,  396,
      263,  192, 1027,  504,  397,  192,  192,  192,  192,  400,
     1027,  403, 1027,  192,  505,  402,  404, 1027,  192,  401,
      398,  506,  399,  192,  192,  192, 1027,  192,  192,  192,
      504,  507, 1027,  192, 1027, 1027,  400,  412,  403,  192,
      411,  505,  402,  404,  192,  192,  401,  192,  506,  192,

      192,  192,  409,  410,  192,  508,  192,  405,  507,  192,
     1027,  192,  406,  413,  412,  509,  192,  411,  407,  192,
      442,  192,  414,  192,  192,  408,  192,  192, 1027,  409,
      410,  192,  508,  415,  405,  192,  192,  192,  192,  406,
      413,  192,  509,  192,  421,  407,  192,  442,  422,  414,
      192,  500,  408,  501,  192,  192, 1027,  192,  192, 1027,
      415,  192,  192,  512,  192, 1027,  192,  424,  192, 1027,
      192,  421,  192, 1027,  192,  422,  423,  192,  500,  426,
      501,  192,  192,  416,  192,  417,  192,  425,  192,  418,
      512, 1027,  192,  192,  424,  513,  419,  192,  192,  192,

      420,  192, 1027,  423,  192,  192,  426, 1027,  427,  514,
      416,  192,  417,  192,  425, 1027,  418, 1027,  192,  192,
      192,  428,  513,  419,  192,  192,  192,  420,  515,  192,
      192,  192,  192,  434,  429,  427,  514,  430,  192,  431,
      192,  516,  433,  192,  432,  192,  192,  192,  428,  192,
      192, 1027,  192,  192,  435,  515,  192,  192,  192,  454,
      434,  429, 1027,  192,  430, 1027,  431,  192,  516,  433,
      192,  432,  192,  192, 1027,  192,  192,  192,  192,  192,
     1027,  435,  441,  192,  440, 1027,  454,  517,  192,  443,
      192,  436,  192,  518, 1027,  192,  449,  519,  192,  192,

     1027,  437,  192,  192,  520,  192,  438,  439,  192,  441,
      192,  440,  192, 1027,  517,  192,  443,  192,  436,  192,
      518,  192,  192,  449,  519,  192,  450,  444,  437,  445,
      192,  520,  192,  438,  439,  192,  446,  192,  447,  192,
      192,  192,  192, 1027,  192,  521,  192,  452,  192,  448,
     1027,  451,  192,  450,  444,  522,  445,  192,  456,  192,
      192,  453,  192,  446,  192,  447,  192,  192,  192,  192,
      192,  455,  521,  192,  452,  192,  448,  192,  451,  192,
      457,  192,  522,  192,  192,  456,  523,  192,  453,  192,
      192,  192, 1027,  192,  524,  192,  459,  192,  455, 1027,

      477,  192,  192,  192,  192,  460,  458,  457,  192,  192,
      192,  192, 1027,  523, 1027,  461, 1027,  192,  192,  462,
      192,  524,  192,  459,  192,  192,  465,  477,  192,  192,
      192, 1027,  460,  458,  463,  192,  192,  192,  192,  464,
      466,  467,  461,  192,  192,  192,  462,  192,  525,  192,
      468,  192,  192,  465,  526, 1027,  192,  192,  469,  470,
      192,  463,  192,  192,  192,  527,  464,  466,  467,  192,
      192,  192,  192,  471,  472,  525,  192,  468,  192,  473,
      192,  526,  192, 1027,  192,  469,  470,  192,  192, 1027,
      192,  192,  527, 1027,  528,  474,  192, 1027,  192,  475,

      471,  472,  192,  192,  192,  192,  473,  192,  192,  192,
      476,  192,  478,  192,  479,  192,  192,  481,  192, 1027,
      482,  528,  474,  192,  192,  192,  475,  483,  192,  192,
      192,  192,  480,  192,  529,  192,  192,  476,  192,  478,
      192,  479,  484,  192,  481,  192,  485,  482,  192, 1027,
      192,  192,  486,  530,  483,  192,  490,  488,  487,  480,
      192,  529,  192,  192,  492,  192,  192,  510,  192,  484,
      489,  531,  192,  485,  532,  192,  192,  192,  533,  486,
      530,  491,  511,  490,  488,  487,  192,  534,  192,  192,
      535,  492,  192,  192,  510,  192,  536,  489,  531,  537,

      538,  532,  539,  192,  192,  533,  540,  543,  491,  511,
      541,  544,  545,  192,  534,  192,  546,  535,  547,  548,
      542,  549,  550,  536,  551,  552,  537,  538,  553,  539,
      554,  555,  556,  540,  543,  557,  558,  541,  544,  545,
      559,  560,  561,  546,  562,  547,  548,  542,  549,  550,
      563,  551,  552,  564,  565,  553,  566,  554,  555,  556,
      567,  568,  557,  558,  569,  570,  571,  559,  560,  561,
      572,  562,  573,  574,  575,  576,  577,  563,  582,  583,
      564,  565,  580,  566,  581,  578,  584,  567,  568,  585,
      586,  569,  570,  571,  579,  587,  588,  572,  591,  573,

      574,  575,  576,  577,  589,  582,  583,  592,  590,  580,
      192,  581,  578,  584,  693,  694,  585,  586,  593,  192,
      594,  579,  587,  588,  192,  591, 1027, 1027,  596,  192,
      192,  589,  192,  192,  592,  590,  595,  192,  192,  192,
      192,  693,  694, 1027,  192,  593,  192,  594,  192,  192,
      695,  192,  192,  192,  192,  596,  192,  192,  597,  192,
      192, 1027,  192,  595,  696,  192,  192,  192,  192,  599,
      192,  192,  598,  192,  192,  192,  192,  695,  192,  192,
      192,  192,  192,  602,  600,  597,  601, 1027,  604,  192,
      192,  696,  192,  192,  603,  192,  599,  192,  192,  598,

      192,  192,  192,  605,  607,  192,  192,  192,  192,  192,
      602,  600,  192,  601,  609,  604,  606,  192,  192,  192,
      192,  603,  192,  697,  192,  192,  613,  192,  192,  192,
      605,  607,  610,  192,  192,  192, 1027,  192,  192,  192,
      612,  609,  192,  606,  608,  192,  192,  611,  192,  192,
      697,  192,  192,  613,  192,  192,  617,  192,  615,  610,
      192,  192,  192,  614,  192,  192,  192,  612,  192,  192,
     1027,  608,  619,  192,  611,  192,  192,  616,  618,  192,
      192,  192,  192,  617,  192,  615,  192,  192,  192,  192,
      614,  698,  192,  192,  620,  192,  192,  192, 1027,  619,

      192, 1027,  192,  192,  616,  618,  625,  192,  192,  192,
     1027,  621,  192,  192,  624,  192,  192,  192,  698,  192,
      192,  620,  622,  192,  192,  623,  192,  192,  192,  192,
      626, 1027,  192,  625,  192,  192, 1027,  629,  621,  192,
      192,  624,  192,  192,  192,  699, 1027,  192,  192,  622,
      192,  700,  623,  192,  192,  192,  192,  626,  627,  192,
      192,  192,  192,  628,  629, 1027,  192,  192,  192,  192,
      192,  631,  699,  632,  701,  192,  192,  192,  700,  192,
     1027,  192,  630,  192, 1027,  627,  192,  192,  192,  192,
      628,  192,  192,  192,  633,  192,  192,  192,  631,  192,

      632,  701,  192,  192,  635,  638,  192,  634,  636,  630,
      192,  192,  192,  192,  702,  192,  192, 1027,  192,  192,
      637,  633,  192,  639,  640,  192,  192, 1027,  192,  192,
      192,  635,  638,  646,  634,  636,  641,  192,  192,  192,
     1027,  702,  192,  192,  192,  192,  642,  637,  192,  192,
      639,  640,  192,  192,  644,  192,  192,  192,  643,  192,
      646, 1027,  192,  641,  192,  192,  648,  192,  647,  192,
      192,  192,  192,  642,  645,  192,  703, 1027,  649,  192,
      192,  644,  192,  192,  192,  643,  192,  192,  192,  192,
      650,  192,  192,  648,  192,  647,  192, 1027,  651, 1027,

     1027,  645,  192,  703,  192,  649,  192,  192,  192,  192,
      192,  192,  192,  658,  192,  192,  192,  650, 1027,  704,
      652,  192,  653,  192,  192,  651,  654,  192,  655,  192,
      192,  192,  192,  192,  192,  192,  192,  192, 1027,  192,
      658,  192,  659,  192, 1027,  192,  704,  652,  192,  653,
      657,  192,  705,  654,  192,  655,  192,  192,  656,  192,
      192, 1027,  192,  192,  192,  192,  660,  192,  192,  659,
      192,  664,  192,  661, 1027,  192,  706,  657,  662,  705,
     1027, 1027, 1027,  192,  192,  656,  192,  192,  192,  192,
      192,  192,  192,  660,  192,  192,  663,  192,  664,  667,

      661,  665,  192,  706,  192,  662,  192,  666,  192,  669,
      192,  192,  192,  192,  192,  192, 1027,  192, 1027,  192,
      668, 1027,  192,  663,  192,  192,  667,  707,  665,  192,
      192,  192,  192,  192,  666,  192,  669,  192,  192,  192,
      192,  192,  192,  670,  708,  192,  192,  668,  673, 1027,
     1027,  192,  192,  671,  707,  672,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1027,  192,  192,  192,
      670,  708,  192,  677,  674,  673,  192,  192,  709,  675,
      671, 1027,  672,  192,  192,  192,  676,  192,  192,  192,
      192,  192, 1027,  192,  710, 1027,  192,  192,  678,  192,

      677,  674,  192,  192,  192,  709,  675,  679,  192,  682,
      192,  192,  680,  676,  681, 1027,  711, 1027,  192,  192,
      192,  710,  192,  192,  192,  678,  192,  683,  192,  192,
      712,  192,  192,  192,  679,  192,  682, 1027, 1027,  680,
      713,  681,  684,  711,  192,  192,  192,  714,  685,  192,
      192,  192,  192,  192,  683,  192, 1027,  712,  192,  192,
      192,  686,  687,  192,  192,  688, 1027,  713,  715,  684,
      192,  192,  716,  192,  714,  685,  717,  192,  192,  192,
      192,  192,  689,  192,  691,  192,  690,  718,  686,  687,
      192,  192,  688,  192,  719,  715,  720,  192,  692,  716,

      192,  192,  721,  717,  722,  192,  723,  724,  192,  689,
      192,  691,  192,  690,  718,  725,  726,  727,  730,  728,
      192,  719,  731,  720,  732,  692,  733,  736,  192,  721,
      729,  722,  192,  723,  724,  734,  735,  737,  738,  739,
      740,  741,  725,  726,  727,  730,  728,  742,  743,  731,
      744,  732,  745,  733,  736,  746,  747,  729,  748,  749,
      750,  751,  734,  735,  737,  738,  739,  740,  741,  752,
      753,  754,  755,  756,  742,  743,  757,  744,  758,  745,
      759,  760,  746,  747,  761,  748,  749,  750,  751,  762,
      763,  764,  765,  192, 1027,  192,  752,  753,  754,  755,

      756,  192, 1027,  757,  192,  758,  766,  759,  760,  771,
      192,  761,  192,  192,  767,  768,  762,  763,  764,  765,
      192,  192,  192,  770,  769,  192,  192,  192,  192,  192,
      192,  192,  192,  766,  772,  773,  771,  192,  192,  192,
      192,  767,  768,  839,  840,  192,  192,  192,  192,  192,
      770,  769,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  772,  773,  192,  775,  192, 1027, 1027,  774,  192,
      839,  840,  192,  192,  192,  192,  192,  776,  192,  192,
      192, 1027,  192,  192,  841,  192,  777,  192,  192,  192,
      192,  775,  842,  780,  778,  774,  192,  192,  192,  192,

     1027, 1027,  192,  779,  776,  192,  192,  192,  192,  192,
      192,  841,  781,  777,  192,  192,  192,  192,  192,  842,
      780,  778,  782,  192,  192,  192,  192,  192,  788, 1027,
      779,  192,  192,  192,  192,  192,  192,  192,  192,  781,
      783,  192,  784,  192,  192,  192,  192,  192,  785,  782,
      192,  192,  192,  192,  192,  788,  192,  192,  192,  192,
      192,  192,  786, 1027,  192,  192,  192,  783,  789,  784,
      192,  787,  192,  192,  192,  785,  192,  790,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  792, 1027,  786,
      192,  192,  192,  192, 1027,  789,  192,  192,  787,  192,

      791,  192,  192,  192,  790,  192,  192,  793,  192,  192,
      192,  192,  192,  192,  792,  192,  192,  192,  192,  192,
      192,  192,  843,  192,  192,  796,  192,  791,  192,  192,
      794,  192,  192,  192,  793,  192,  795,  192,  192, 1027,
      192,  192,  192,  192,  797,  192,  192,  192,  192,  843,
      192,  192,  796,  192, 1027, 1027,  192,  794,  192, 1027,
     1027,  192,  192,  795,  844,  192,  192,  192,  192,  798,
      192,  797,  192,  192,  799, 1027,  192,  192,  192,  800,
      192,  192,  192,  192,  801,  192,  192,  803,  192, 1027,
      192,  844,  192,  192, 1027,  802,  798,  192,  192,  845,

      192,  799,  192,  192,  192,  846,  800,  192,  192,  192,
      192,  801,  192,  192,  803,  192,  192,  192,  192,  804,
      192,  806,  802,  805,  192,  192,  845,  192,  847,  192,
     1027,  192,  846,  848,  849,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  812,  192,  804,  192,  806, 1027,
      805,  192,  807,  808,  192,  847,  192,  809,  192,  192,
      848,  849,  192,  192,  192,  192,  192,  192,  192,  810,
      811,  812,  192, 1027,  192,  192,  192, 1027,  850,  807,
      808,  192, 1027,  192,  809,  192,  192,  192,  813,  192,
      192,  192,  192, 1027, 1027,  192,  810,  811,  815,  192,

      814,  192,  192,  192,  816,  850, 1027,  192,  192,  192,
      192, 1027, 1027,  192,  192,  813,  192,  192,  851,  192,
      817,  818,  192,  192,  192,  815,  192,  814,  192,  852,
      823,  816,  192,  192,  192,  192,  192,  192,  820,  819,
      192,  192,  192,  192,  192,  851,  192,  817,  818,  821,
      192,  192,  192,  192,  192,  192,  852,  823,  824,  192,
      192,  192,  192,  822,  853,  820,  819,  826,  192,  192,
      192,  192,  192,  192,  192,  192,  821,  192,  192,  192,
      192,  192,  827, 1027,  825,  824,  192,  192,  192,  192,
      822,  853,  192, 1027,  826,  192,  192,  192, 1027,  192,

      192,  192,  192, 1027,  192,  192,  192,  192,  192,  827,
      828,  825,  854,  192,  192, 1027,  192,  830,  829,  192,
      192,  192,  192,  192,  192,  832,  192,  192,  192,  192,
      192,  835,  834,  192, 1027,  192,  833,  828, 1027,  854,
      192,  192,  831,  192,  830,  829,  192,  192,  192,  192,
      192,  192,  832,  192, 1027,  192,  192,  192,  835,  834,
      192,  192,  855,  833,  836,  192,  192,  192,  192,  831,
      838,  856,  857,  192,  192,  192,  192,  192,  192,  858,
      192,  192,  837,  859,  860,  192,  192,  192,  192,  855,
      192,  836,  192,  192,  192,  192,  861,  838,  856,  857,

      862,  192,  192,  863,  864,  865,  858,  192,  192,  837,
      859,  860,  192,  192,  866,  867,  868,  192,  869,  870,
      871,  192,  192,  861,  872,  873,  874,  862,  875,  876,
      863,  864,  865,  877,  878,  879,  880,  881,  882,  883,
      884,  866,  867,  868,  885,  869,  870,  871,  886,  887,
      888,  872,  873,  874,  889,  875,  876, 1027,  192,  192,
      877,  878,  879,  880,  881,  882,  883,  884,  192, 1027,
      192,  885,  891,  892,  192,  886,  887,  888,  192,  192,
     1027,  889,  893,  192,  895,  192,  192,  192,  192,  890,
      192, 1027,  192,  192,  192,  192,  894,  192,  896,  891,

      892,  192,  192,  192, 1027,  192,  192,  192,  899,  893,
      192,  895,  192,  902,  192,  192,  890,  192,  192,  192,
      192,  192,  192,  894,  192,  896,  192,  192,  192,  192,
      192,  898,  192,  192,  192,  899,  897,  903, 1027,  192,
      902,  192,  900, 1027,  192,  192,  192,  192, 1027,  192,
      901,  192,  192,  192,  192,  192,  192,  192,  898,  192,
      192,  192,  192,  897,  903,  192,  907,  904,  192,  900,
      906,  192,  192,  192,  192,  192,  192,  901,  941,  192,
      905,  192,  192,  192,  192,  192,  192, 1027,  192,  192,
     1027, 1027,  192,  907,  904,  192,  908,  906,  192,  192,

      192,  192,  192,  192,  192,  941,  192,  905,  192,  192,
     1027,  909,  192,  192,  192,  942,  910,  192,  192,  192,
      192, 1027,  192,  908,  192,  192, 1027,  192,  192,  192,
      911,  192,  914,  192,  192,  192, 1027,  192,  909,  192,
      192,  192,  942,  910,  192,  192,  192,  192,  192,  192,
      912,  192,  192,  192,  915,  192,  192,  911,  192,  914,
      192,  192,  192,  913,  192,  916,  192,  192,  192,  192,
     1027,  192, 1027,  192,  192,  192,  192,  912,  192,  192,
      192,  915,  192,  917,  192,  192,  192,  192,  192,  192,
      913,  192,  916,  918,  192,  192,  192,  192,  192,  192,

      192,  192,  919,  192,  192,  192,  192,  192,  192, 1027,
      917,  192,  921,  192, 1027,  192,  192,  192,  192,  192,
      918,  192,  920,  192,  192,  192,  192,  192,  924,  919,
      192,  192,  192,  192,  192,  192,  922,  192,  923,  921,
      192,  925,  943,  192,  192,  192,  192,  926,  192,  920,
      192,  192,  192,  192,  192,  924,  944,  192, 1027,  192,
      192,  927,  192,  922,  192,  923,  192,  192,  925,  943,
      192,  192,  192,  192,  926,  192,  929,  192,  192, 1027,
      192,  928,  192,  944,  192,  192,  192,  192,  927,  192,
      930,  192,  934,  192,  192, 1027,  192,  192,  192,  931,

      192,  945,  192,  929,  192,  192,  933,  935,  928,  192,
      946,  192,  192,  192,  192,  932,  192,  930,  192,  934,
      937,  192,  192,  192,  192,  192,  931,  192,  945,  192,
      936,  192,  192,  933,  935,  939,  192,  946,  192,  192,
      192,  192,  932,  192,  940,  192, 1027,  937,  192,  192,
      938,  192,  192,  192,  192,  947,  192,  936,  192,  192,
      948,  949,  939,  192,  950,  951,  192,  192,  192,  952,
      953,  940,  192,  192,  954,  192,  955,  938,  192,  956,
      192,  957,  947,  192,  958,  959,  192,  948,  949,  960,
      961,  950,  951,  962,  963,  192,  952,  953,  964,  965,

      192,  954,  966,  955,  967, 1027,  956,  968,  957, 1027,
      192,  958,  959,  192,  995,  970,  960,  961,  192,  192,
      962,  963,  969, 1027,  192,  964,  965,  192,  192,  966,
      192,  967,  971,  192,  968,  192,  192,  192,  192,  192,
      192,  995,  970,  972,  192,  192,  192,  996,  192,  969,
      973,  192,  192,  192,  192,  192,  192,  192,  192,  971,
      192,  192,  192,  192,  192,  192,  192,  975,  974,  192,
      972,  192,  192,  192,  996,  192, 1027,  973,  192,  192,
      192,  192,  976,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192, 1027,  975,  974,  192, 1027,  997,  192,

      192,  977,  192,  192,  192,  192,  192,  192,  192,  976,
      192,  192,  192,  192,  192,  192,  192,  192,  978,  192,
      192,  981, 1027,  192,  979,  997,  192, 1027,  977,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192, 1027,  998,  978,  192,  192,  981,  980,
      192,  979,  192,  192,  192,  192,  192, 1027,  192,  192,
      983,  982,  192,  192,  192,  192,  985,  192,  192,  192,
      984,  998,  192,  192,  192,  192,  980, 1027,  987,  192,
      192,  192,  192,  192,  192,  192,  192,  983,  982,  986,
      192,  192,  192,  985,  192,  192,  192,  984,  192,  192,

      192,  192,  192, 1027,  988,  987,  192,  192,  990,  192,
      192,  192,  192,  192,  192,  192,  986,  192,  192,  192,
      991,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      989,  988,  192,  192,  192,  990,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  999,  991,  192,  992,
      192,  192, 1000,  192,  192,  192,  192,  989,  192,  192,
      192,  192,  192, 1001,  192,  192, 1002,  192, 1003,  994,
      192,  192,  192,  999,  192,  192,  992,  993,  192, 1000,
      192,  192,  192,  192,  192,  192, 1013,  192,  192,  192,
     1001,  192,  192, 1002,  192, 1003,  994,  192,  192,  192,

      192,  192, 1004,  192,  993,  192,  192,  192,  192,  192,
      192,  192, 1005, 1013,  192,  192,  192,  192,  192,  192,
      192,  192,  192, 1027,  192,  192,  192,  192, 1014, 1004,
      192,  192, 1008,  192,  192,  192,  192,  192,  192, 1005,
      192,  192,  192,  192,  192,  192, 1006,  192,  192,  192,
     1007,  192,  192,  192,  192, 1014,  192,  192,  192, 1008,
      192,  192,  192,  192,  192,  192, 1015,  192,  192,  192,
      192, 1012, 1027, 1006,  192,  192,  192, 1007,  192,  192,
      192,  192,  192,  192,  192, 1009,  192,  192,  192,  192,
      192,  192, 1016, 1015,  192,  192, 1011,  192, 1012, 1010,

      192,  192, 1017,  192,  192, 1023,  192,  192,  192,  192,
      192, 1027, 1009,  192,  192,  192, 1027,  192,  192, 1016,
      192,  192,  192, 1011,  192, 1018, 1010,  192,  192, 1017,
      192,  192, 1023,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192, 1019, 1024, 1027, 1027,  192,  192,  192,
     1022,  192, 1018, 1020,  192,  192, 1021,  192,  192,  192,
      192,  192, 1025,  192,  192,  192,  192,  192, 1027,  192,
     1019, 1024,  192,  192,  192,  192,  192, 1022,  192, 1027,
     1020,  192,  192, 1021,  192,  192,  192,  192, 1026, 1025,
     1027,  192,  192,  192,  192, 1027,  192, 1027,  192,  192,

      192,  192, 1027,  192, 1027,  192, 1027, 1027, 1027,  192,
     1027,  192, 1027, 1027, 1027, 1026, 1027, 1027, 1027,  192,
      192,  192, 1027,  192, 1027,  192,   46,   46,   46,   46,
       46,   88, 1027, 1027,   88,   88,  178,  178,  178, 1027,
      178,  180, 1027,  180,  180,  180,  183, 1027,  183,  183,
      183,  192, 1027,  192,  192,  192,    7, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027
    } ;

static const flex_int16_t yy_chk[4125] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1030,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  384,
       23,   30,   24,   21,  274,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   23,   25,
      187,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   23,   25,   28,   25,  186,

       27,   49,   49,   25,   42,   28,   27,  183,   25,   26,
       99,   28,   42,   50,   50,   57,   57,   26,   32,   55,
       26,   55,   32,   26,   28,  102,   26,   27,   32,   26,
       33,   42,   28,   27,   33,   29,   26,   99,   28,   42,
       33,   29,   29,   29,   26,   32,   92,   26,   29,   32,
       26,   34,  102,   26,   91,   32,   26,   33,   58,   58,
       38,   33,   29,   36,   38,   34,   88,   33,   29,   29,
       29,   34,   34,   35,   36,   29,   85,   41,   34,   41,
       36,   35,   41,   71,   39,   35,   39,   38,   35,   39,
       36,   38,   34,   43,   43,   60,   39,   39,   34,   34,

       35,   36,   59,   71,   41,   56,   41,   36,   35,   41,
       71,   39,   35,   39,   68,   35,   39,   70,   68,   52,
       43,   43,   68,   39,   39,   40,   40,   70,   68,   40,
       71,  103,   40,   40,   86,   86,  107,   70,   68,   40,
      110,   68,   40,   51,   70,   68,   90,   90,   47,   68,
      181,  181,   40,   40,   70,   68,   40,   45,  103,   40,
       40,  185,  185,  107,   70,   68,   40,  110,   20,   40,
       61,   61,   67,   61,   61,   61,   61,   61,   61,   67,
       61,   61,   61,   72,   77,   67,   61,   72,   61,  100,
      113,  113,   67,   72,   61,  106,   61,  100,   19,   67,

       61,   61,  106,   72,   77,   84,   67,  114,  115,   16,
       72,   77,   67,   61,   72,   61,  100,  113,  113,   67,
       72,   61,  106,   61,  100,   84,  116,   61,   61,  106,
       72,   77,   84,  117,  114,  115,   61,   62,   62,   11,
       62,   62,   62,   62,   62,   62,   73,   62,   62,   62,
       73,   76,   84,  116,   62,   76,   73,  118,  101,   78,
      117,  101,   76,   78,  120,  121,   73,   83,   76,    7,
       83,   83,    4,   73,   62,   76,    3,   73,   76,   78,
        0,   62,   76,   73,  118,  101,   78,   83,  101,   76,
       78,  120,  121,   73,   83,   76,   81,   83,   83,  104,

      122,   62,   76,   62,   63,   81,   78,   81,   63,  109,
       81,   63,  123,  104,   83,  108,   81,  108,   63,  109,
      111,   63,   63,   81,  124,  111,  104,  122,   63,    0,
        0,   63,   81,    0,   81,   63,  109,   81,   63,  123,
      104,    0,  108,   81,  108,   63,  109,  111,   63,   63,
       82,  124,  111,    0,   82,   63,   64,  112,   82,  119,
       64,  119,  112,  125,   64,  119,  126,  127,  112,  130,
       64,  132,  119,   64,   82,  112,  119,   82,    0,  128,
       64,   82,  128,   64,  112,   82,  119,   64,  119,  112,
      125,   64,  119,  126,  127,  112,  130,   64,  132,  119,

       64,   82,  112,  119,  133,  129,  128,   64,   65,  128,
      129,  135,  136,  137,  138,   65,  139,   65,  139,  141,
        0,  140,   65,  140,  142,  143,  144,   65,   65,    0,
        0,  133,  129,    0,  140,   65,    0,  129,  135,  136,
      137,  138,   65,  139,   65,  139,  141,  134,  140,   65,
      140,  142,  143,  144,   65,   65,   66,  134,  145,  146,
       66,  140,  134,  134,   66,  147,  148,   66,  150,  151,
       66,  152,  153,   66,  134,  154,   66,  156,    0,  154,
       66,    0,    0,   66,  134,  145,  146,   66,    0,  134,
      134,   66,  147,  148,   66,  150,  151,   66,  152,  153,

       66,    0,  154,   66,  156,  155,  154,   66,   69,   69,
      155,  157,  159,  160,  158,   69,   69,   69,  161,  162,
      163,    0,   69,  158,  165,  166,  167,  168,   69,    0,
      170,  158,  155,    0,    0,   69,   69,  155,  157,  159,
      160,  158,   69,   69,   69,  161,  162,  163,  164,   69,
      158,  165,  166,  167,  168,   69,   74,  170,  158,  164,
       74,  169,  171,  172,  169,  173,  171,  174,  175,  172,
       74,  176,    0,    0,  276,  164,   74,   74,  173,  192,
       74,    0,    0,   74,    0,    0,  164,   74,  169,  171,
      172,  169,  173,  171,  174,  175,  172,   74,  176,  192,

      194,  276,  278,   74,   74,  173,  192,   74,   75,   75,
        0,  193,  193,  279,  281,  194,    0,   75,    0,  283,
      194,   75,    0,    0,   75,    0,  192,  194,   75,  278,
      195,    0,  193,    0,    0,   75,   75,  195,  193,  193,
      279,  281,  194,  200,   75,  195,  283,  194,   75,  196,
      195,   75,  196,  196,  197,   75,   79,  195,   79,  193,
      198,   79,  198,  200,  195,  284,  285,  197,   79,   79,
      200,    0,  195,  196,  197,  287,  196,  195,   79,  196,
      196,  197,  198,   79,    0,   79,    0,  198,   79,  198,
      200,  226,  284,  285,  197,   79,   79,  199,  199,  288,

      196,  197,  287,    0,    0,   79,   80,   80,  201,  198,
       80,  226,  199,   80,   80,  201,    0,  199,  226,    0,
       80,    0,  201,   80,  199,  199,  288,  202,  201,    0,
       80,  202,    0,   80,   80,  201,  203,   80,  226,  199,
       80,   80,  201,  203,  199,  203,  206,   80,  205,  201,
       80,  202,    0,  289,  202,  201,  203,   80,  202,  204,
        0,  206,    0,  203,  290,  205,  206,    0,  205,  204,
      203,  291,  203,  206,  209,  205,    0,  210,  202,  204,
      289,  293,    0,  203,    0,    0,  204,  210,  206,  208,
      209,  290,  205,  206,  209,  205,  204,  210,  291,  211,

      232,  209,  208,  208,  210,  295,  204,  207,  293,  208,
        0,  207,  207,  211,  210,  296,  208,  209,  207,  211,
      232,  209,  212,  212,  210,  207,  211,  232,    0,  208,
      208,  207,  295,  213,  207,  213,  208,  215,  207,  207,
      211,  216,  296,  212,  215,  207,  211,  232,  216,  212,
      212,  286,  207,  286,  218,  213,    0,  215,  207,    0,
      213,  216,  213,  298,  215,    0,  217,  218,  216,    0,
      212,  215,  220,    0,  218,  216,  217,  219,  286,  220,
      286,  218,  213,  214,  215,  214,  217,  219,  216,  214,
      298,    0,  220,  217,  218,  299,  214,  219,  221,  220,

      214,  218,    0,  217,  219,  214,  220,    0,  221,  300,
      214,  222,  214,  217,  219,    0,  214,    0,  221,  220,
      223,  222,  299,  214,  219,  221,  225,  214,  301,  227,
      224,  222,  214,  227,  223,  221,  300,  223,  222,  224,
      223,  302,  225,  228,  224,  221,  225,  223,  222,  227,
      224,    0,  241,  225,  228,  301,  227,  224,  222,  241,
      227,  223,    0,  228,  223,    0,  224,  223,  302,  225,
      228,  224,  241,  225,    0,  230,  227,  224,  231,  241,
        0,  228,  231,  236,  230,    0,  241,  303,  233,  233,
      228,  229,  229,  305,    0,  230,  236,  306,  231,  241,

        0,  229,  230,  236,  307,  231,  229,  229,  233,  231,
      236,  230,  229,    0,  303,  233,  233,  237,  229,  229,
      305,  234,  230,  236,  306,  231,  237,  234,  229,  234,
      236,  307,  239,  229,  229,  233,  235,  237,  235,  229,
      235,  234,  238,    0,  237,  308,  240,  239,  234,  235,
        0,  238,  239,  237,  234,  309,  234,  243,  243,  239,
      235,  240,  238,  235,  237,  235,  240,  235,  234,  238,
      244,  242,  308,  240,  239,  242,  235,  243,  238,  239,
      245,  245,  309,  247,  243,  243,  310,  235,  240,  238,
      244,  246,    0,  240,  311,  242,  247,  244,  242,    0,

      260,  245,  242,  247,  243,  248,  246,  245,  245,  248,
      247,  246,    0,  310,    0,  249,    0,  244,  246,  249,
      260,  311,  242,  247,  251,  250,  251,  260,  245,  248,
      247,    0,  248,  246,  250,  249,  248,  252,  246,  250,
      252,  253,  249,  253,  251,  250,  249,  260,  312,  254,
      253,  251,  250,  251,  313,    0,  248,  252,  253,  254,
      255,  250,  249,  253,  252,  315,  250,  252,  253,  254,
      253,  251,  250,  255,  256,  312,  254,  253,  256,  257,
      255,  313,  257,    0,  252,  253,  254,  255,  258,    0,
      253,  259,  315,    0,  316,  258,  254,    0,  256,  259,

      255,  256,  257,  262,  261,  256,  257,  255,  258,  257,
      259,  259,  261,  264,  262,  258,  263,  264,  259,    0,
      264,  316,  258,  262,  261,  256,  259,  265,  265,  257,
      262,  261,  263,  264,  317,  258,  263,  259,  259,  261,
      264,  262,  266,  263,  264,  267,  266,  264,  265,    0,
      262,  261,  267,  318,  265,  265,  269,  268,  267,  263,
      264,  317,  266,  263,  271,  267,  270,  297,  271,  266,
      268,  319,  267,  266,  320,  265,  269,  268,  321,  267,
      318,  270,  297,  269,  268,  267,  270,  322,  271,  266,
      323,  271,  267,  270,  297,  271,  324,  268,  319,  325,

      326,  320,  327,  269,  268,  321,  328,  330,  270,  297,
      329,  331,  333,  270,  322,  271,  334,  323,  335,  336,
      329,  337,  338,  324,  339,  340,  325,  326,  341,  327,
      342,  344,  345,  328,  330,  346,  347,  329,  331,  333,
      348,  349,  350,  334,  351,  335,  336,  329,  337,  338,
      352,  339,  340,  353,  354,  341,  355,  342,  344,  345,
      356,  357,  346,  347,  358,  360,  361,  348,  349,  350,
      362,  351,  363,  365,  366,  367,  368,  352,  372,  373,
      353,  354,  371,  355,  371,  370,  375,  356,  357,  376,
      377,  358,  360,  361,  370,  378,  379,  362,  381,  363,

      365,  366,  367,  368,  380,  372,  373,  382,  380,  371,
      385,  371,  370,  375,  493,  494,  376,  377,  386,  387,
      388,  370,  378,  379,  390,  381,    0,    0,  391,  389,
      385,  380,  391,  392,  382,  380,  389,  385,  386,  387,
      388,  493,  494,    0,  390,  386,  387,  388,  393,  389,
      495,  390,  391,  392,  394,  391,  389,  385,  393,  391,
      392,    0,  395,  389,  496,  386,  387,  388,  393,  395,
      397,  390,  394,  399,  394,  393,  389,  495,  398,  391,
      392,  394,  395,  397,  396,  393,  396,    0,  399,  395,
      397,  496,  402,  399,  398,  393,  395,  397,  398,  394,

      399,  394,  401,  400,  403,  398,  396,  400,  404,  395,
      397,  396,  402,  396,  406,  399,  401,  397,  406,  402,
      399,  398,  401,  497,  403,  398,  409,  400,  404,  401,
      400,  403,  407,  396,  400,  404,    0,  405,  406,  402,
      408,  406,  408,  401,  405,  406,  409,  407,  410,  401,
      497,  403,  407,  409,  400,  404,  413,  405,  411,  407,
      414,  411,  408,  410,  405,  406,  412,  408,  410,  408,
        0,  405,  416,  409,  407,  410,  413,  412,  415,  407,
      414,  411,  415,  413,  405,  411,  412,  414,  411,  408,
      410,  498,  416,  412,  417,  410,  417,  418,    0,  416,

      421,    0,  415,  413,  412,  415,  422,  414,  411,  415,
        0,  418,  420,  412,  421,  419,  417,  418,  498,  416,
      421,  417,  419,  417,  418,  420,  422,  421,  424,  415,
      423,    0,  420,  422,  423,  419,    0,  427,  418,  420,
      427,  421,  419,  417,  418,  500,    0,  421,  424,  419,
      425,  503,  420,  422,  423,  424,  426,  423,  425,  420,
      427,  423,  419,  426,  427,    0,  428,  427,  429,  430,
      425,  429,  500,  430,  504,  424,  426,  425,  503,  431,
        0,  423,  428,  426,    0,  425,  428,  427,  429,  430,
      426,  433,  432,  428,  431,  429,  430,  425,  429,  431,

      430,  504,  434,  426,  433,  436,  431,  432,  434,  428,
      435,  433,  432,  428,  505,  429,  430,    0,  433,  432,
      435,  431,  434,  437,  438,  436,  431,    0,  442,  434,
      435,  433,  436,  444,  432,  434,  439,  435,  433,  432,
        0,  505,  440,  437,  438,  441,  439,  435,  442,  434,
      437,  438,  436,  444,  441,  442,  439,  435,  440,  443,
      444,    0,  440,  439,  445,  441,  446,  446,  445,  440,
      437,  438,  441,  439,  443,  442,  506,    0,  447,  443,
      444,  441,  447,  439,  445,  440,  443,  446,  448,  440,
      448,  445,  441,  446,  446,  445,  449,    0,  449,    0,

        0,  443,  447,  506,  450,  447,  443,  451,  448,  447,
      452,  445,  453,  457,  446,  448,  449,  448,    0,  508,
      450,  454,  451,  449,  450,  449,  452,  451,  454,  447,
      452,  450,  453,  457,  451,  448,  456,  452,    0,  453,
      457,  454,  458,  449,    0,  455,  508,  450,  454,  451,
      456,  450,  509,  452,  451,  454,  456,  452,  455,  453,
      457,    0,  458,  456,  460,  455,  459,  461,  454,  458,
      459,  463,  455,  460,    0,  463,  510,  456,  461,  509,
        0,    0,    0,  456,  460,  455,  464,  461,  462,  458,
      459,  460,  455,  459,  461,  463,  462,  459,  463,  466,

      460,  464,  463,  510,  465,  461,  464,  465,  462,  468,
      467,  460,  469,  464,  461,  462,    0,  459,    0,  466,
      467,    0,  463,  462,  465,  470,  466,  511,  464,  468,
      467,  465,  469,  464,  465,  462,  468,  467,  471,  469,
      472,  473,  474,  470,  513,  470,  466,  467,  473,    0,
        0,  465,  470,  471,  511,  472,  468,  467,  471,  469,
      472,  473,  474,  475,  476,  471,    0,  472,  473,  474,
      470,  513,  470,  478,  475,  473,  479,  477,  514,  476,
      471,    0,  472,  475,  476,  471,  477,  472,  473,  474,
      475,  476,    0,  478,  515,    0,  479,  477,  480,  482,

      478,  475,  481,  479,  477,  514,  476,  480,  484,  482,
      475,  476,  481,  477,  481,    0,  518,    0,  480,  482,
      478,  515,  481,  479,  477,  480,  482,  483,  484,  481,
      519,  483,  486,  485,  480,  484,  482,    0,    0,  481,
      520,  481,  485,  518,  488,  480,  482,  521,  486,  481,
      489,  483,  486,  485,  483,  484,    0,  519,  483,  486,
      485,  487,  488,  487,  488,  489,    0,  520,  522,  485,
      489,  488,  523,  490,  521,  486,  524,  489,  483,  486,
      485,  491,  490,  487,  491,  492,  490,  526,  487,  488,
      487,  488,  489,  490,  529,  522,  530,  489,  492,  523,

      490,  491,  532,  524,  534,  492,  536,  537,  491,  490,
      487,  491,  492,  490,  526,  538,  539,  540,  543,  541,
      490,  529,  547,  530,  549,  492,  551,  553,  491,  532,
      541,  534,  492,  536,  537,  552,  552,  554,  556,  557,
      558,  559,  538,  539,  540,  543,  541,  560,  562,  547,
      563,  549,  564,  551,  553,  565,  566,  541,  567,  568,
      569,  571,  552,  552,  554,  556,  557,  558,  559,  572,
      573,  574,  577,  579,  560,  562,  580,  563,  581,  564,
      582,  583,  565,  566,  584,  567,  568,  569,  571,  585,
      586,  588,  590,  593,    0,  595,  572,  573,  574,  577,

      579,  594,    0,  580,  596,  581,  593,  582,  583,  598,
      597,  584,  599,  593,  594,  595,  585,  586,  588,  590,
      593,  594,  595,  597,  596,  601,  602,  603,  594,  598,
      597,  596,  599,  593,  600,  603,  598,  597,  600,  599,
      593,  594,  595,  695,  697,  601,  602,  603,  594,  605,
      597,  596,  601,  602,  603,  604,  598,  597,  600,  599,
      607,  600,  603,  606,  605,  600,    0,    0,  604,  605,
      695,  697,  601,  602,  603,  604,  605,  606,  609,  608,
      607,    0,  604,  606,  698,  600,  608,  607,  610,  612,
      606,  605,  699,  611,  609,  604,  605,  611,  609,  608,

        0,    0,  604,  610,  606,  609,  608,  607,  610,  612,
      606,  698,  613,  608,  613,  610,  612,  611,  614,  699,
      611,  609,  614,  616,  611,  609,  608,  617,  622,    0,
      610,  618,  622,  615,  613,  610,  612,  619,  614,  613,
      615,  613,  618,  616,  611,  614,  620,  617,  619,  614,
      616,  618,  622,  615,  617,  622,  621,  619,  618,  622,
      615,  613,  620,    0,  619,  614,  620,  615,  623,  618,
      616,  621,  623,  620,  617,  619,  621,  624,  618,  622,
      615,  625,  627,  621,  619,  626,  628,  629,    0,  620,
      631,  629,  623,  620,    0,  623,  630,  624,  621,  623,

      626,  625,  627,  621,  624,  626,  628,  630,  625,  627,
      631,  629,  626,  628,  629,  633,  630,  631,  629,  623,
      635,  632,  700,  630,  624,  636,  634,  626,  625,  627,
      632,  637,  626,  628,  630,  633,  634,  631,  629,    0,
      635,  632,  633,  630,  637,  636,  634,  635,  632,  700,
      638,  637,  636,  634,    0,    0,  642,  632,  637,    0,
        0,  639,  633,  634,  701,  644,  640,  635,  632,  638,
      638,  637,  636,  634,  639,    0,  642,  638,  637,  640,
      643,  639,  641,  642,  641,  644,  640,  643,  639,    0,
      645,  701,  644,  640,    0,  641,  638,  638,  646,  702,

      643,  639,  641,  642,  647,  704,  640,  643,  639,  641,
      645,  641,  644,  640,  643,  648,  649,  645,  646,  647,
      650,  651,  641,  649,  647,  646,  702,  643,  705,  641,
        0,  647,  704,  706,  708,  648,  649,  645,  652,  655,
      650,  651,  648,  649,  657,  646,  647,  650,  651,    0,
      649,  647,  652,  652,  653,  705,  654,  653,  652,  655,
      706,  708,  648,  649,  657,  652,  655,  650,  651,  654,
      656,  657,  656,    0,  653,  658,  654,    0,  709,  652,
      652,  653,    0,  654,  653,  652,  655,  659,  658,  661,
      660,  657,  656,    0,    0,  658,  654,  656,  660,  656,

      659,  653,  658,  654,  662,  709,    0,  659,  662,  661,
      660,    0,    0,  664,  659,  658,  661,  660,  710,  656,
      663,  664,  658,  666,  663,  660,  665,  659,  662,  711,
      669,  662,  669,  664,  659,  662,  661,  660,  666,  665,
      664,  667,  670,  666,  663,  710,  665,  663,  664,  667,
      666,  663,  669,  665,  668,  662,  711,  669,  671,  669,
      664,  667,  670,  668,  712,  666,  665,  673,  667,  670,
      666,  663,  674,  665,  668,  675,  667,  676,  671,  669,
      672,  668,  674,    0,  672,  671,  678,  673,  667,  670,
      668,  712,  674,    0,  673,  675,  677,  676,    0,  674,

      672,  668,  675,    0,  676,  671,  678,  672,  680,  674,
      677,  672,  713,  678,  673,    0,  677,  680,  679,  674,
      679,  683,  675,  677,  676,  682,  681,  672,  680,  682,
      684,  685,  684,  678,    0,  680,  683,  677,    0,  713,
      679,  683,  681,  677,  680,  679,  681,  679,  683,  682,
      684,  685,  682,  681,    0,  680,  682,  684,  685,  684,
      687,  686,  714,  683,  686,  689,  688,  679,  683,  681,
      690,  715,  716,  681,  691,  692,  682,  684,  685,  719,
      687,  686,  688,  721,  722,  689,  688,  687,  686,  714,
      690,  686,  689,  688,  691,  692,  724,  690,  715,  716,

      727,  691,  692,  728,  729,  730,  719,  687,  686,  688,
      721,  722,  689,  688,  735,  737,  738,  690,  739,  742,
      743,  691,  692,  724,  744,  745,  746,  727,  748,  749,
      728,  729,  730,  750,  751,  752,  753,  754,  755,  756,
      758,  735,  737,  738,  759,  739,  742,  743,  760,  762,
      763,  744,  745,  746,  764,  748,  749,    0,  766,  767,
      750,  751,  752,  753,  754,  755,  756,  758,  768,    0,
      769,  759,  770,  771,  774,  760,  762,  763,  766,  767,
        0,  764,  772,  772,  774,  766,  767,  773,  768,  768,
      769,    0,  770,  771,  774,  768,  773,  769,  775,  770,

      771,  774,  776,  772,    0,  766,  767,  773,  779,  772,
      772,  774,  780,  783,  773,  768,  768,  769,  775,  770,
      771,  774,  776,  773,  778,  775,  777,  781,  779,  776,
      772,  778,  780,  783,  773,  779,  777,  784,    0,  780,
      783,  782,  781,    0,  778,  775,  777,  781,    0,  776,
      782,  778,  785,  777,  781,  779,  787,  784,  778,  780,
      783,  782,  788,  777,  784,  786,  788,  785,  782,  781,
      787,  778,  785,  777,  781,  790,  787,  782,  839,  785,
      786,  791,  788,  787,  784,  786,  793,    0,  782,  788,
        0,    0,  786,  788,  785,  790,  789,  787,  789,  785,

      796,  791,  790,  787,  792,  839,  793,  786,  791,  788,
        0,  792,  786,  793,  794,  841,  794,  795,  789,  798,
      796,    0,  790,  789,  792,  789,    0,  796,  791,  799,
      795,  792,  801,  793,  794,  797,    0,  795,  792,  798,
      802,  794,  841,  794,  795,  789,  798,  796,  800,  799,
      797,  792,  801,  804,  802,  797,  799,  795,  803,  801,
      802,  794,  797,  800,  795,  803,  798,  802,  800,  805,
        0,  806,    0,  804,  807,  800,  799,  797,  803,  801,
      804,  802,  797,  808,  809,  803,  813,  802,  814,  805,
      800,  806,  803,  810,  807,  800,  805,  810,  806,  811,

      804,  807,  811,  808,  809,  803,  813,  812,  814,    0,
      808,  809,  815,  813,    0,  814,  805,  810,  806,  811,
      810,  807,  812,  816,  810,  817,  811,  812,  818,  811,
      808,  809,  815,  813,  812,  814,  816,  819,  817,  815,
      820,  819,  842,  816,  810,  817,  811,  821,  818,  812,
      816,  821,  817,  830,  812,  818,  843,  819,    0,  815,
      820,  822,  822,  816,  819,  817,  823,  820,  819,  842,
      816,  821,  817,  830,  821,  818,  824,  824,  821,    0,
      830,  823,  822,  843,  819,  826,  823,  820,  822,  822,
      825,  828,  829,  823,  825,    0,  829,  824,  821,  826,

      830,  844,  827,  824,  824,  826,  828,  831,  823,  822,
      846,  828,  826,  823,  825,  827,  829,  825,  828,  829,
      833,  825,  827,  829,  824,  834,  826,  831,  844,  827,
      832,  832,  826,  828,  831,  836,  835,  846,  828,  836,
      833,  825,  827,  829,  837,  834,    0,  833,  837,  827,
      835,  832,  834,  838,  831,  847,  835,  832,  832,  836,
      850,  854,  836,  835,  856,  857,  836,  833,  837,  860,
      863,  837,  834,  838,  864,  837,  867,  835,  832,  868,
      838,  870,  847,  835,  871,  872,  836,  850,  854,  874,
      875,  856,  857,  879,  881,  837,  860,  863,  882,  883,

      838,  864,  888,  867,  889,    0,  868,  890,  870,    0,
      891,  871,  872,  892,  946,  893,  874,  875,  894,  896,
      879,  881,  892,    0,  899,  882,  883,  890,  900,  888,
      891,  889,  894,  892,  890,  893,  895,  891,  894,  896,
      892,  946,  893,  895,  899,  894,  896,  948,  900,  892,
      897,  899,  897,  898,  890,  900,  895,  891,  902,  894,
      892,  903,  893,  895,  904,  894,  896,  901,  898,  901,
      895,  899,  897,  898,  948,  900,    0,  897,  902,  897,
      898,  903,  905,  895,  904,  902,  906,  909,  903,  901,
      910,  904,  907,    0,  901,  898,  901,    0,  954,  897,

      898,  907,  905,  908,  911,  902,  906,  909,  903,  905,
      910,  904,  907,  906,  909,  912,  901,  910,  908,  907,
      913,  915,    0,  908,  911,  954,  916,    0,  907,  905,
      908,  911,  917,  906,  909,  912,  914,  910,  920,  907,
      913,  915,  912,    0,  956,  908,  916,  913,  915,  914,
      908,  911,  917,  916,  918,  921,  914,    0,  920,  917,
      919,  918,  912,  914,  919,  920,  922,  913,  915,  923,
      921,  956,  924,  916,  918,  921,  914,    0,  925,  917,
      925,  918,  921,  914,  919,  920,  922,  919,  918,  923,
      926,  919,  924,  922,  927,  928,  923,  921,  929,  924,

      925,  918,  921,    0,  926,  925,  931,  925,  932,  935,
      926,  919,  932,  922,  927,  928,  923,  926,  929,  924,
      933,  927,  928,  930,  933,  929,  931,  925,  936,  935,
      930,  926,  932,  931,  934,  932,  935,  926,  937,  932,
      938,  927,  928,  930,  933,  929,  957,  933,  936,  934,
      930,  933,  960,  931,  934,  936,  935,  930,  937,  932,
      938,  934,  940,  963,  939,  937,  964,  938,  965,  940,
      930,  933,  968,  957,  969,  936,  934,  939,  970,  960,
      971,  934,  940,  972,  939,  937,  995,  938,  974,  940,
      963,  939,  968,  964,  969,  965,  940,  975,  970,  968,

      971,  969,  973,  972,  939,  970,  973,  971,  974,  940,
      972,  939,  975,  995,  976,  974,  977,  975,  978,  968,
      979,  969,  980,    0,  975,  970,  973,  971,  997,  973,
      972,  982,  984,  973,  976,  974,  977,  983,  978,  975,
      979,  976,  980,  977,  975,  978,  981,  979,  981,  980,
      983,  982,  984,  973,  985,  997,  986,  983,  982,  984,
      988,  976,  989,  977,  983,  978,  999,  979,  981,  980,
      987,  992,    0,  981,  985,  981,  986,  983,  982,  984,
      988,  985,  989,  986,  983,  987,  990,  988,  991,  989,
      987,  992, 1001,  999,  993,  981,  991,  987,  992,  990,

      994,  985, 1002,  986, 1005, 1013,  990,  988,  991,  989,
     1004,    0,  987,  990,  993,  991,    0,  987,  992, 1001,
      994,  993, 1007,  991, 1005, 1004,  990,  994, 1006, 1002,
     1004, 1005, 1013,  990, 1009,  991, 1010, 1004, 1012, 1011,
     1008,  993, 1007, 1006, 1015,    0,    0,  994, 1006, 1007,
     1011, 1005, 1004, 1008, 1009, 1006, 1010, 1004, 1012, 1011,
     1008, 1009, 1018, 1010, 1019, 1012, 1011, 1008,    0, 1007,
     1006, 1015, 1021, 1022, 1020, 1006, 1025, 1011, 1026,    0,
     1008, 1009, 1018, 1010, 1019, 1012, 1011, 1008, 1020, 1018,
        0, 1019, 1021, 1022, 1020,    0, 1025,    0, 1026, 1021,

     1022, 1020,    0, 1025,    0, 1026,    0,    0,    0, 1018,
        0, 1019,    0,    0,    0, 1020,    0,    0,    0, 1021,
     1022, 1020,    0, 1025,    0, 1026, 1028, 1028, 1028, 1028,
     1028, 1029,    0,    0, 1029, 1029, 1031, 1031, 1031,    0,
     1031, 1032,    0, 1032, 1032, 1032, 1033,    0, 1033, 1033,
     1033, 1034,    0, 1034, 1034, 1034, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;

#line 1925 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1939 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include "unistd.h"
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2226 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1028 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1027 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 143:
#line 207 "flex_lexer.l"
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{
	yylval->sval = _strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN 0; yylval->sval = _strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 232 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3062 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1028 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1028 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1027);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 237 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

